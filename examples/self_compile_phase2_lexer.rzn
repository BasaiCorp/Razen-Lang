# Razen Self-Compilation Phase 2: Lexer
# This file tests the lexical analysis component for self-compilation

# Import required libraries
lib memorylib;    # Memory management library
lib compilerlib;  # Compiler operations library

show "===== RAZEN SELF-COMPILATION PHASE 2: LEXER =====";

# Define a simple source code with various token types
take source = "let x = 5; # This is a comment\ntake message = \"Hello, World!\";\nshow message;";
show "Source code to tokenize:";
show source;

# Tokenize the source code
show "\nTokenizing source code...";
show "Tokens: " + CompilerLib[tokenize](source);

# Test tokenizing different language constructs
show "\nTesting different language constructs:";

# Variables and assignments
take var_test = "let num = 42; take text = \"string\"; hold flag = true;";
show "Variable declarations: " + CompilerLib[tokenize](var_test);

# Control structures
take control_test = "if x > 10 { show \"Greater\"; } else { show \"Less or equal\"; }";
show "Control structures: " + CompilerLib[tokenize](control_test);

# Functions
take function_test = "fun add(a, b) { return a + b; }";
show "Function definition: " + CompilerLib[tokenize](function_test);

# Library import
take import_test = "lib mathlib; show MathLib[sqrt](16);";
show "Library import: " + CompilerLib[tokenize](import_test);

show "\n===== LEXER TEST COMPLETE =====";
