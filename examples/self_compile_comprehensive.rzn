# Razen Self-Compilation Comprehensive Test
# This file tests all functions in the self-compilation libraries

# Import libraries
lib memorylib;    # Memory management library
lib binarylib;    # Binary file operations library
lib bitwiselib;   # Bit manipulation library
lib systemlib;    # System library
lib processlib;   # Process management library
lib threadlib;    # Thread management library
lib compilerlib;  # Compiler operations library
lib loglib;       # Logging library

show "===== RAZEN SELF-COMPILATION COMPREHENSIVE TEST =====";

# Memory Management Operations
show(yellow) "1. Testing Memory Operations:";

# Test pointer operations
num value = 42;
show(yellow) "Original value: " + value;
num ptr = MemoryLib[addressof](value);
show(yellow) "Pointer to value: " + ptr;
num retrieved = MemoryLib[deref](ptr);
show(yellow) "Dereferenced value: " + retrieved;
num next_address = MemoryLib[add_offset](ptr, 1);
show(yellow) "Next address: " + next_address;

# Test memory allocation and byte operations
num size = 1024;
show(yellow) "Allocating memory: " + MemoryLib[alloc](size);
show(yellow) "Memory stats: " + MemoryLib[stats]();

# Test buffer operations
show(yellow) "Creating buffer 1: " + MemoryLib[create_buffer](100);
show(yellow) "Creating buffer 2: " + MemoryLib[create_buffer](100);

# Write to first buffer
show(yellow) "Writing to buffer: " + MemoryLib[buffer_write_string](1, "Hello");

# Read from first buffer
show(yellow) "Reading from buffer: " + MemoryLib[buffer_read_string](1, 0, 5);

# Copy between buffers
show(yellow) "Copying between buffers: " + MemoryLib[buffer_copy](1, 0, 2, 0, 5);

# Binary File Operations
show "2. Testing Binary File Operations:";

# First, create a test file
show "Creating binary file: " + BinaryLib[create]("test_binary.bin");

# Open the file for writing (simplified mode)
show "Opening binary file for writing: " + BinaryLib[open]("test_binary.bin", "w");

# Get the file handle from the open operation
num write_handle = 1; # First file handle will be 1
show "Write handle: " + write_handle;

# Write data to the file
show "Writing to binary file: " + BinaryLib[write_bytes](write_handle, "Hello Razen Binary World!");

# Close the file after writing
show "Closing write handle: " + BinaryLib[close](write_handle);

# Open the file again for reading
show "Opening binary file for reading: " + BinaryLib[open]("test_binary.bin", "r");

# Get the new file handle
num read_handle = 2; # Second file handle will be 2
show "Read handle: " + read_handle;

# Seek to the beginning of the file
show "Seeking to beginning of file: " + BinaryLib[seek](read_handle, 0);

# Read the first 5 bytes
show "Reading first 5 bytes: " + BinaryLib[read_bytes](read_handle, 5);

# Seek to position 6 and read more
show "Seeking to position 6: " + BinaryLib[seek](read_handle, 6);
show "Reading next 5 bytes: " + BinaryLib[read_bytes](read_handle, 5);

# Close the file after reading
show "Closing read handle: " + BinaryLib[close](read_handle);

# Get file statistics
show "File stats: " + BinaryLib[stats]();

# Test additional binary file operations
show "Converting string to bytes: " + BinaryLib[string_to_bytes]("Test");
num bytes = BinaryLib[read_bytes](read_handle, 5);
show "Converting bytes to string: " + BinaryLib[bytes_to_string](bytes);

# Bit Operations
show(red) "3. Testing Bit Operations:";

# Test basic bitwise operations
num a = 5;  # 0101 in binary
num b = 3;  # 0011 in binary

show(red) "Bitwise AND: " + BitwiseLib[and](a, b);
show(red) "Bitwise OR: " + BitwiseLib[or](a, b);
show(red) "Bitwise XOR: " + BitwiseLib[xor](a, b);
show(red) "Bitwise NOT: " + BitwiseLib[not](a, 8);
show(red) "Left shift: " + BitwiseLib[left_shift](a, 2);
show(red) "Right shift: " + BitwiseLib[right_shift](20, 2);

# Test additional bitwise operations
show(red) "Unsigned right shift: " + BitwiseLib[unsigned_right_shift](-8, 2);
show(red) "Get bit at position 0: " + BitwiseLib[get_bit](a, 0);
show(red) "Set bit at position 1: " + BitwiseLib[set_bit](0, 1, 1);
show(red) "Count bits in 5: " + BitwiseLib[count_bits](a);
show(red) "Convert 42 to binary: " + BitwiseLib[to_binary](42);
show(red) "Convert 42 to hex: " + BitwiseLib[to_hex](42);
show(red) "Convert binary '101010' to decimal: " + BitwiseLib[from_binary]("101010");
show(red) "Convert hex '2A' to decimal: " + BitwiseLib[from_hex]("2A");

# System Operations
show(green) "4. Testing System Operations:";

# Test basic system functions
show(green) "Process ID: " + SystemLib[getpid]();
show(green) "Current working directory: " + SystemLib[getcwd]();
show(green) "Current time: " + SystemLib[current_time]();
show(green) "System name: " + SystemLib[system_name]();

# Test environment variables
show(green) "PATH environment variable: " + SystemLib[getenv]("PATH");
num env_result = SystemLib[setenv]("TEST_VAR", "test_value");
show(green) "TEST_VAR value: " + SystemLib[getenv]("TEST_VAR");

# Test command execution
show(green) "Executing 'echo Hello from Razen': " + SystemLib[execute]("echo Hello from Razen");

# Test environment and arguments
show(green) "Environment variables count: " + SystemLib[environ]().length;
show(green) "Command line arguments count: " + SystemLib[args]().length;

# Test file system operations
show(green) "Current path exists: " + SystemLib[path_exists](SystemLib[getcwd]());
show(green) "Real path of '.': " + SystemLib[realpath](".");

# Process Management Operations
show(cyan) "5. Testing Process Management Operations:";

# Create a process
num pid = ProcessLib[create]("echo Process created by Razen");
show(cyan) "Process ID: " + pid;

# Wait for process
num status = ProcessLib[wait](pid);
show(cyan) "Process exit status: " + status;

# Check if process is running (should be false after wait)
show(cyan) "Is process still running: " + ProcessLib[is_running](pid);

# Get process info
show(cyan) "Process info: " + ProcessLib[info]();

# Thread Operations
show(magenta) "6. Testing Threading Operations:";

# Get thread ID and count
show(magenta) "Thread ID: " + ThreadLib[thread_id]();
show(magenta) "Thread count: " + ThreadLib[thread_count]();

# Test mutex operations
num mutex = ThreadLib[mutex_create]();
show(magenta) "Creating mutex: " + mutex;
show(magenta) "Locking mutex: " + ThreadLib[mutex_lock](mutex);
show(magenta) "Unlocking mutex: " + ThreadLib[mutex_unlock](mutex);

# Test additional thread operations
show(magenta) "CPU count: " + ThreadLib[cpu_count]();
show(magenta) "Current thread: " + ThreadLib[current]();

# Compiler Operations
show(cyan) "7. Testing Compiler Operations:";

# Test AST node creation
num ast_node = CompilerLib[create_node]("variable", "x", "integer");
show(cyan) "Created AST node: " + CompilerLib[node_to_string](ast_node);

# Test symbol table operations
num symbol_table = CompilerLib[create_symbol_table]();
CompilerLib[add_symbol](symbol_table, "x", "integer", 0);
CompilerLib[add_symbol](symbol_table, "y", "string", 1);

num symbol = CompilerLib[lookup_symbol](symbol_table, "x");
show(cyan) "Symbol 'x' info: " + symbol;

# Test code generation
num ir_code = CompilerLib[generate_ir]("x = 5 + 3");
show(cyan) "IR code: " + ir_code;

# Test tokenizing, parsing, and compiling
show(cyan) "Tokenizing code: " + CompilerLib[tokenize]("fun test() { return 42; }");
show(cyan) "Parsing code: " + CompilerLib[parse]("fun test() { return 42; }");
show(cyan) "Compiling code: " + CompilerLib[compile]("fun test() { return 42; }");

# Logging Operations
show(blue) "8. Testing Logging Operations:";

# Test different log levels
show(blue) "Info log: " + LogLib[info]("This is an info message");
show(blue) "Warning log: " + LogLib[warn]("This is a warning message");
show(blue) "Error log: " + LogLib[error]("This is an error message");
show(blue) "Debug log: " + LogLib[debug]("This is a debug message");

show "===== SELF-COMPILATION COMPREHENSIVE TEST COMPnumE =====";
