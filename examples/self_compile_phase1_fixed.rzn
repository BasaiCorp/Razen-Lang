# Razen Self-Compilation Phase 1
# This file demonstrates the essential features needed for self-compilation

# Import libraries
lib memlib;   # Memory management library
lib binlib;   # Binary file operations library
lib bitlib;   # Bit manipulation library
lib syslib;   # System library
lib complib;  # Compiler library
lib thrlib;   # Threading library

show "===== RAZEN SELF-COMPILATION PHASE 1 =====";

# Memory Management Operations
show(yellow) "1. Testing Memory Operations:";
show(yellow) "Allocating memory: " + MemLib[alloc](1024);
show(yellow) "Memory stats: " + MemLib[stats]();

# Create two buffers for testing
show(yellow) "Creating buffer 1: " + MemLib[create_buffer](100);
show(yellow) "Creating buffer 2: " + MemLib[create_buffer](100);

# Write to first buffer
show(yellow) "Writing to buffer: " + MemLib[buffer_write_string](1, "Hello Razen");

# Read from first buffer
show(yellow) "Reading from buffer: " + MemLib[buffer_read_string](1, 0, 5);

# Copy between buffers
show(yellow) "Copying between buffers: " + MemLib[buffer_copy](1, 0, 2, 0, 5);

# Binary File Operations
show "2. Testing Binary File Operations:";

# First, create a test file
show "Creating binary file: " + BinLib[create]("test_binary.bin");

# Open the file for writing (simplified mode)
show "Opening binary file for writing: " + BinLib[open]("test_binary.bin", "w");

# Get the file handle from the open operation
let write_handle = 1; # First file handle will be 1
show "Write handle: " + write_handle;

# Write data to the file
show "Writing to binary file: " + BinLib[write_bytes](write_handle, "Hello Razen Binary World!");

# Close the file after writing
show "Closing write handle: " + BinLib[close](write_handle);

# Open the file again for reading
show "Opening binary file for reading: " + BinLib[open]("test_binary.bin", "r");

# Get the new file handle
let read_handle = 2; # Second file handle will be 2
show "Read handle: " + read_handle;

# Seek to the beginning of the file
show "Seeking to beginning of file: " + BinLib[seek](read_handle, 0);

# Read the first 5 bytes
show "Reading first 5 bytes: " + BinLib[read_bytes](read_handle, 5);

# Seek to position 6 and read more
show "Seeking to position 6: " + BinLib[seek](read_handle, 6);
show "Reading next 5 bytes: " + BinLib[read_bytes](read_handle, 5);

# Close the file after reading
show "Closing read handle: " + BinLib[close](read_handle);

# Get file statistics
show "File stats: " + BinLib[stats]();

# Bit Operations
show(red) "3. Testing Bit Operations:";
show(red) "Bitwise AND: " + BitLib[and](5, 3);
show(red) "Bitwise OR: " + BitLib[or](5, 3);
show(red) "Bitwise XOR: " + BitLib[xor](5, 3);
show(red) "Bitwise NOT: " + BitLib[not](5, 8);
show(red) "Left shift: " + BitLib[left_shift](5, 2);
show(red) "Right shift: " + BitLib[right_shift](20, 2);

# System Operations
show(green) "4. Testing System Operations:";
show(green) "Process ID: " + SysLib[getpid]();
show(green) "Current time: " + SysLib[current_time]();
show(green) "System name: " + SysLib[system_name]();

# Compiler Operations
show(cyan) "5. Testing Compiler Operations:";
show(cyan) "Tokenizing code: " + CompLib[tokenize]("fun test() { return 42; }");
show(cyan) "Parsing code: " + CompLib[parse]("fun test() { return 42; }");
show(cyan) "Compiling code: " + CompLib[compile]("fun test() { return 42; }");

# Threading Operations
show(magenta) "6. Testing Threading Operations:";
show(magenta) "Thread ID: " + ThrLib[thread_id]();
show(magenta) "Thread count: " + ThrLib[thread_count]();
show(magenta) "Creating mutex: " + ThrLib[mutex_create]();
show(magenta) "Locking mutex: " + ThrLib[mutex_lock](ThrLib[mutex_create]());
show(magenta) "Unlocking mutex: " + ThrLib[mutex_unlock](ThrLib[mutex_create]());

show "===== SELF-COMPILATION TEST COMPLETE =====";
