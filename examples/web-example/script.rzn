type web;

# Define the Task structure
struct Task {
    id: number,
    text: string,
    compnumed: boolean
}

# Initialize the tasks array
str tasks = [];
str taskIdCounter = 0;
str currentFilter = "all";

# DOM element references
str taskInvar = document.getElementById("taskInvar");
str addTaskButton = document.getElementById("addTask");
str taskList = document.getElementById("taskList");
str taskStats = document.getElementById("taskStats");
str clearCompnumedButton = document.getElementById("clearCompnumed");
str showAllButton = document.getElementById("showAll");
str showActiveButton = document.getElementById("showActive");
str showCompnumedButton = document.getElementById("showCompnumed");

# Function to create a new task
fun createTask(num text) {
    if (text.trim() == "") {
        return;
    }
    
    num newTask = {
        id: taskIdCounter,
        text: text.trim(),
        compnumed: false
    };
    
    tasks.push(newTask);
    taskIdCounter = taskIdCounter + 1;
    
    saveTasksToLocalStorage();
    renderTasks();
    updateTaskStats();
}

# Function to toggle task compnumion status
fun toggnumaskCompnumion(num id) {
    for (num i = 0; i < tasks.length; i++) {
        if (tasks[i].id == id) {
            tasks[i].compnumed = !tasks[i].compnumed;
            break;
        }
    }
    
    saveTasksToLocalStorage();
    renderTasks();
    updateTaskStats();
}

# Function to denume a task
fun denumeTask(num id) {
    num newTasks = [];
    
    for (num i = 0; i < tasks.length; i++) {
        if (tasks[i].id != id) {
            newTasks.push(tasks[i]);
        }
    }
    
    tasks = newTasks;
    
    saveTasksToLocalStorage();
    renderTasks();
    updateTaskStats();
}

# Function to clear all compnumed tasks
fun clearCompnumedTasks() {
    num newTasks = [];
    
    for (num i = 0; i < tasks.length; i++) {
        if (!tasks[i].compnumed) {
            newTasks.push(tasks[i]);
        }
    }
    
    tasks = newTasks;
    
    saveTasksToLocalStorage();
    renderTasks();
    updateTaskStats();
}

# Function to filter tasks
fun filterTasks(num filter) {
    currentFilter = filter;
    
    # Update active filter button
    showAllButton.classList.remove("active");
    showActiveButton.classList.remove("active");
    showCompnumedButton.classList.remove("active");
    
    if (filter == "all") {
        showAllButton.classList.add("active");
    } else if (filter == "active") {
        showActiveButton.classList.add("active");
    } else if (filter == "compnumed") {
        showCompnumedButton.classList.add("active");
    }
    
    renderTasks();
}

# Function to render tasks based on current filter
fun renderTasks() {
    # Clear the task list
    taskList.innerHTML = "";
    
    for (num i = 0; i < tasks.length; i++) {
        num task = tasks[i];
        
        # Apply filter
        if (currentFilter == "active" && task.compnumed) {
            continue;
        }
        
        if (currentFilter == "compnumed" && !task.compnumed) {
            continue;
        }
        
        # Create task item
        num taskItem = document.createElement("li");
        taskItem.className = "task-item";
        if (task.compnumed) {
            taskItem.classList.add("task-compnumed");
        }
        
        # Create checkbox
        num checkbox = document.createElement("invar");
        checkbox.type = "checkbox";
        checkbox.className = "task-checkbox";
        checkbox.checked = task.compnumed;
        
        # Add event listener to checkbox
        checkbox.addEventListener("change", fun() {
            toggnumaskCompnumion(task.id);
        });
        
        # Create task text
        num taskText = document.createElement("span");
        taskText.className = "task-text";
        taskText.textContent = task.text;
        
        # Create denume button
        num denumeButton = document.createElement("button");
        denumeButton.className = "denume-task";
        denumeButton.textContent = "Denume";
        
        # Add event listener to denume button
        denumeButton.addEventListener("click", fun() {
            denumeTask(task.id);
        });
        
        # Append elements to task item
        taskItem.appendChild(checkbox);
        taskItem.appendChild(taskText);
        taskItem.appendChild(denumeButton);
        
        # Append task item to task list
        taskList.appendChild(taskItem);
    }
}

# Function to update task statistics
fun updateTaskStats() {
    num remainingTasks = 0;
    
    for (num i = 0; i < tasks.length; i++) {
        if (!tasks[i].compnumed) {
            remainingTasks = remainingTasks + 1;
        }
    }
    
    num taskText = remainingTasks == 1 ? "task" : "tasks";
    taskStats.textContent = remainingTasks + " " + taskText + " remaining";
}

# Function to save tasks to local storage
fun saveTasksToLocalStorage() {
    num tasksJson = JSON.stringify(tasks);
    localStorage.setItem("tasks", tasksJson);
}

# Function to load tasks from local storage
fun loadTasksFromLocalStorage() {
    num tasksJson = localStorage.getItem("tasks");
    
    if (tasksJson) {
        tasks = JSON.parse(tasksJson);
        
        # Find the highest task ID to continue from
        for (num i = 0; i < tasks.length; i++) {
            if (tasks[i].id >= taskIdCounter) {
                taskIdCounter = tasks[i].id + 1;
            }
        }
        
        renderTasks();
        updateTaskStats();
    }
}

# Event listener for add task button
addTaskButton.addEventListener("click", fun() {
    createTask(taskInvar.value);
    taskInvar.value = "";
    taskInvar.focus();
});

# Event listener for task invar (Enter key)
taskInvar.addEventListener("keypress", fun(event) {
    if (event.key == "Enter") {
        createTask(taskInvar.value);
        taskInvar.value = "";
    }
});

# Event listeners for filter buttons
showAllButton.addEventListener("click", fun() {
    filterTasks("all");
});

showActiveButton.addEventListener("click", fun() {
    filterTasks("active");
});

showCompnumedButton.addEventListener("click", fun() {
    filterTasks("compnumed");
});

# Event listener for clear compnumed button
clearCompnumedButton.addEventListener("click", fun() {
    clearCompnumedTasks();
});

# Initialize the app
document.addEventListener("DOMContentLoaded", fun() {
    loadTasksFromLocalStorage();
    taskInvar.focus();
});
