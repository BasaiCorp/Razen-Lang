# Razen Standard Functions
# Standard library functions for the Razen programming language

# Example Usage:
# let result = add(5, 3);  # Output: 8
# show result;

#==============================================================================
# 1. Math Functions
#==============================================================================

fun add(a, b) {
    return a + b;
}
# Example: add(5, 3) => 8
# Example: add(10, 20) => 30

fun subtract(a, b) {
    return a - b;
}
# Example: subtract(10, 3) => 7
# Example: subtract(20, 5) => 15

fun multiply(a, b) {
    return a * b;
}
# Example: multiply(4, 3) => 12
# Example: multiply(5, 2) => 10

fun divide(a, b) {
    if (b == 0) {
        throw "Division by zero is not allowed";
    }
    return a / b;
}
# Example: divide(10, 2) => 5
# Example: divide(15, 3) => 5

fun power(base, exponent) {
    let result = 1;
    let i = 0;
    while (i < exponent) {
        result = result * base;
        i = i + 1;
    }
    return result;
}
# Example: power(2, 3) => 8
# Example: power(5, 2) => 25

fun abs(num) {
    if (num < 0) {
        return -num;
    }
    return num;
}
# Example: abs(-5) => 5
# Example: abs(5) => 5

fun max(a, b) {
    if (a > b) {
        return a;
    }
    return b;
}
# Example: max(5, 10) => 10
# Example: max(20, 15) => 20

fun min(a, b) {
    if (a < b) {
        return a;
    }
    return b;
}
# Example: min(5, 10) => 5
# Example: min(20, 15) => 15

fun round(num) {
    let integer = int(num);
    if (num - integer >= 0.5) {
        return integer + 1;
    }
    return integer;
}
# Example: round(3.2) => 3
# Example: round(3.7) => 4

#==============================================================================
# 2. String Functions
#==============================================================================

fun len(value) {
    # Works for strings, arrays, and maps
    return length(value);
}
# Example: len("Hello") => 5
# Example: len([1, 2, 3]) => 3

fun concat(str1, str2) {
    return str1 + str2;
}
# Example: concat("Hello", "World") => "HelloWorld"
# Example: concat("Razen", "Lang") => "RazenLang"

fun upper(str) {
    # Implementation in Rust
    return str.upper();
}
# Example: upper("hello") => "HELLO"
# Example: upper("razen") => "RAZEN"

fun lower(str) {
    # Implementation in Rust
    return str.lower();
}
# Example: lower("HELLO") => "hello"
# Example: lower("RAZEN") => "razen"

fun substring(str, start, end) {
    # Implementation in Rust
    return str.substring(start, end);
}
# Example: substring("Hello", 1, 3) => "el"
# Example: substring("Razen", 0, 3) => "Raz"

fun replace(str, old, new) {
    # Implementation in Rust
    return str.replace(old, new);
}
# Example: replace("Hello World", "World", "Razen") => "Hello Razen"
# Example: replace("abc", "b", "d") => "adc"

fun trim(str) {
    # Implementation in Rust
    return str.trim();
}
# Example: trim("  Hello  ") => "Hello"
# Example: trim("\tRazen\n") => "Razen"

#==============================================================================
# 3. Array Functions
#==============================================================================

fun push(arr, item) {
    # Implementation in Rust
    arr.push(item);
    return arr;
}
# Example: push([1, 2], 3) => [1, 2, 3]
# Example: push(["a"], "b") => ["a", "b"]

fun pop(arr) {
    # Implementation in Rust
    return arr.pop();
}
# Example: pop([1, 2, 3]) => 3 (and arr becomes [1, 2])
# Example: pop(["a", "b"]) => "b" (and arr becomes ["a"])

fun join_array(arr, separator) {
    # Implementation in Rust
    return arr.join(separator);
}
# Example: join_array(["a", "b", "c"], "-") => "a-b-c"
# Example: join_array([1, 2, 3], ",") => "1,2,3"

fun sort(arr) {
    # Implementation in Rust
    return arr.sort();
}
# Example: sort([3, 1, 2]) => [1, 2, 3]
# Example: sort(["c", "a", "b"]) => ["a", "b", "c"]

fun reverse(arr) {
    # Implementation in Rust
    return arr.reverse();
}
# Example: reverse([1, 2, 3]) => [3, 2, 1]
# Example: reverse(["a", "b", "c"]) => ["c", "b", "a"]

fun slice(arr, start, end) {
    # Implementation in Rust
    return arr.slice(start, end);
}
# Example: slice([1, 2, 3, 4, 5], 1, 3) => [2, 3]
# Example: slice(["a", "b", "c", "d"], 0, 2) => ["a", "b"]

#==============================================================================
# 4. Type Conversion Functions
#==============================================================================

fun int(value) {
    # Implementation in Rust
    return to_int(value);
}
# Example: int("123") => 123
# Example: int(123.45) => 123

fun float(value) {
    # Implementation in Rust
    return to_float(value);
}
# Example: float("123.45") => 123.45
# Example: float(123) => 123.0

fun string(value) {
    # Implementation in Rust
    return to_string(value);
}
# Example: string(123) => "123"
# Example: string(true) => "true"

fun bool(value) {
    # Implementation in Rust
    return to_bool(value);
}
# Example: bool(1) => true
# Example: bool(0) => false
# Example: bool("true") => true

#==============================================================================
# 5. Testing Functions
#==============================================================================

# Add a main function to test all the functions
fun main() {
    show "Testing math functions:";
    show "add(5, 3) = " + add(5, 3);
    show "subtract(10, 4) = " + subtract(10, 4);
    show "multiply(6, 7) = " + multiply(6, 7);
    show "divide(20, 5) = " + divide(20, 5);
    show "power(2, 3) = " + power(2, 3);
    show "abs(-5) = " + abs(-5);
    show "max(5, 10) = " + max(5, 10);
    show "min(5, 10) = " + min(5, 10);
    
    show "\nTesting string functions:";
    show "concat('Hello', 'World') = " + concat("Hello", "World");
    
    show "\nTesting if-else with numeric comparison:";
    let a = 10;
    let b = 5;
    if (a > b) {
        show a + " is greater than " + b;
    } else {
        show a + " is not greater than " + b;
    }
    
    show "\nTesting string comparison:";
    take s1 = "test";
    take s2 = "test";
    take s3 = "different";
    if (s1 == s2) {
        show "s1 equals s2";
    } else {
        show "s1 does not equal s2";
    }
    
    if (s1 == s3) {
        show "s1 equals s3";
    } else {
        show "s1 does not equal s3";
    }
}

# Run the main function
main();
