# Razen Standard Functions
# Standard library functions for the Razen programming language

# Example Usage:
# let result = add(5, 3);  # Output: 8
# show result;

#==============================================================================
# 1️ Math Functions
#==============================================================================

fun add(a, b) {
    return a + b;
}
# Example: add(5, 3) => 8
# Example: add(10, 20) => 30

fun subtract(a, b) {
    return a - b;
}
# Example: subtract(10, 3) => 7
# Example: subtract(20, 5) => 15

fun multiply(a, b) {
    return a * b;
}
# Example: multiply(4, 3) => 12
# Example: multiply(5, 2) => 10

fun divide(a, b) {
    if (b == 0) {
        throw "Division by zero is not allowed";
    }
    return a / b;
}
# Example: divide(10, 2) => 5
# Example: divide(15, 3) => 5

fun power(base, exponent) {
    let result = 1;
    let i = 0;
    while (i < exponent) {
        result = result * base;
        i = i + 1;
    }
    return result;
}
# Example: power(2, 3) => 8
# Example: power(5, 2) => 25

fun abs(num) {
    if (num < 0) {
        return -num;
    }
    return num;
}
# Example: abs(-5) => 5
# Example: abs(5) => 5

fun max(a, b) {
    if (a > b) {
        return a;
    }
    return b;
}
# Example: max(5, 10) => 10
# Example: max(20, 15) => 20

fun min(a, b) {
    if (a < b) {
        return a;
    }
    return b;
}
# Example: min(5, 10) => 5
# Example: min(20, 15) => 15

fun round(num) {
    let integer = int(num);
    if (num - integer >= 0.5) {
        return integer + 1;
    }
    return integer;
}
# Example: round(3.2) => 3
# Example: round(3.7) => 4

#==============================================================================
# 2️ String Functions
#==============================================================================

fun len(value) {
    # Works for strings, arrays, and maps
    return length(value);
}
# Example: len("Hello") => 5
# Example: len([1, 2, 3]) => 3

fun concat(str1, str2) {
    return str1 + str2;
}
# Example: concat("Hello", "World") => "HelloWorld"
# Example: concat("Razen", "Lang") => "RazenLang"

fun upper(str) {
    # Implementation in Rust
    return str.upper();
}
# Example: upper("hello") => "HELLO"
# Example: upper("razen") => "RAZEN"

fun lower(str) {
    # Implementation in Rust
    return str.lower();
}
# Example: lower("HELLO") => "hello"
# Example: lower("RAZEN") => "razen"

fun substring(str, start, end) {
    # Implementation in Rust
    return str.substring(start, end);
}
# Example: substring("Hello", 1, 3) => "el"
# Example: substring("Razen", 0, 3) => "Raz"

fun replace(str, old, new) {
    # Implementation in Rust
    return str.replace(old, new);
}
# Example: replace("Hello World", "World", "Razen") => "Hello Razen"
# Example: replace("abc", "b", "d") => "adc"

fun trim(str) {
    # Implementation in Rust
    return str.trim();
}
# Example: trim("  Hello  ") => "Hello"
# Example: trim("\tRazen\n") => "Razen"

#==============================================================================
# 3️ Array Functions
#==============================================================================

fun push(arr, item) {
    # Implementation in Rust
    arr.push(item);
    return arr;
}
# Example: push([1, 2], 3) => [1, 2, 3]
# Example: push(["a"], "b") => ["a", "b"]

fun pop(arr) {
    # Implementation in Rust
    return arr.pop();
}
# Example: pop([1, 2, 3]) => 3 (and arr becomes [1, 2])
# Example: pop(["a", "b"]) => "b" (and arr becomes ["a"])

fun join_array(arr, separator) {
    # Implementation in Rust
    return arr.join(separator);
}
# Example: join_array(["a", "b", "c"], "-") => "a-b-c"
# Example: join_array([1, 2, 3], ",") => "1,2,3"

fun sort(arr) {
    # Implementation in Rust
    return arr.sort();
}
# Example: sort([3, 1, 2]) => [1, 2, 3]
# Example: sort(["c", "a", "b"]) => ["a", "b", "c"]

fun reverse(arr) {
    # Implementation in Rust
    return arr.reverse();
}
# Example: reverse([1, 2, 3]) => [3, 2, 1]
# Example: reverse(["a", "b", "c"]) => ["c", "b", "a"]

fun slice(arr, start, end) {
    # Implementation in Rust
    return arr.slice(start, end);
}
# Example: slice([1, 2, 3, 4, 5], 1, 3) => [2, 3]
# Example: slice(["a", "b", "c", "d"], 0, 2) => ["a", "b"]

#==============================================================================
# 4️ Type Conversion Functions
#==============================================================================

fun int(value) {
    # Implementation in Rust
    return to_int(value);
}
# Example: int("123") => 123
# Example: int(123.45) => 123

fun float(value) {
    # Implementation in Rust
    return to_float(value);
}
# Example: float("123.45") => 123.45
# Example: float(123) => 123.0

fun str(value) {
    # Implementation in Rust
    return to_string(value);
}
# Example: str(123) => "123"
# Example: str(true) => "true"

fun bool(value) {
    # Implementation in Rust
    return to_bool(value);
}
# Example: bool(1) => true
# Example: bool(0) => false
# Example: bool("true") => true

#==============================================================================
# 5️ Type Checking Functions
#==============================================================================

fun is_number(value) {
    # Implementation in Rust
    return typeof(value) == "number";
}
# Example: is_number(123) => true
# Example: is_number("123") => false

fun is_string(value) {
    # Implementation in Rust
    return typeof(value) == "string";
}
# Example: is_string("hello") => true
# Example: is_string(123) => false

fun is_boolean(value) {
    # Implementation in Rust
    return typeof(value) == "boolean";
}
# Example: is_boolean(true) => true
# Example: is_boolean(1) => false

fun is_array(value) {
    # Implementation in Rust
    return typeof(value) == "array";
}
# Example: is_array([1, 2, 3]) => true
# Example: is_array("[1, 2, 3]") => false

fun is_map(value) {
    # Implementation in Rust
    return typeof(value) == "map";
}
# Example: is_map({"a": 1}) => true
# Example: is_map([1, 2, 3]) => false

fun is_null(value) {
    # Implementation in Rust
    return value == null;
}
# Example: is_null(null) => true
# Example: is_null(0) => false

func isArray(put value) {
    hold = Array.isArray(value);
    return hold;
}
# Example: isArray([1, 2, 3]) => true
# Example: isArray("123") => false

#==============================================================================
# 6️ Input/Output
#==============================================================================

func say(take message) {
    show message;
}
# Example: say("Hello World") => prints "Hello World"
# Example: say("Welcome to Razen") => prints "Welcome to Razen"

func ask(take question) {
    read result = question;
    return result;
}
# Example: ask("What's your name?") => reads user input
# Example: ask("Enter a number:") => reads user input

#==============================================================================
# 7️ Numbers
#==============================================================================

func random(let max) {
    sum = Math.random() * max;
    return sum;
}
# Example: random(10) => random number between 0 and 10
# Example: random(100) => random number between 0 and 100

func round(let num) {
    sum = Math.round(num);
    return sum;
}
# Example: round(3.7) => 4
# Example: round(3.2) => 3

#==============================================================================
# 8️ Time
#==============================================================================

func time() {
    current = Date.now();
    return current;
}
# Example: time() => current timestamp (e.g., 1678901234567)

func date() {
    now = new Date().toISOString();
    return now;
}
# Example: date() => current date string (e.g., "2023-03-15T12:34:56.789Z")

#==============================================================================
# 9️ Objects
#==============================================================================

func keys(map obj) {
    key = Object.keys(obj);
    return key;
}
# Example: keys({name: "John", age: 30}) => ["name", "age"]
# Example: keys({}) => []

func values(map obj) {
    value = Object.values(obj);
    return value;
}
# Example: values({name: "John", age: 30}) => ["John", 30]
# Example: values({}) => []

#==============================================================================
# 10️ Storage
#==============================================================================

func save(put value) {
    store = value;
    return store;
}
# Example: save("Hello") => "Hello"
# Example: save(123) => 123

func load(store) {
    return store;
}
# Example: load() => previously stored value
# Example: load() => null (if nothing stored)

#==============================================================================
# 11️ Box
#==============================================================================

func put(put value) {
    box = value;
    return box;
}
# Example: put("Hello") => "Hello"
# Example: put(123) => 123

func get(box) {
    return box;
}
# Example: get() => previously boxed value
# Example: get() => null (if nothing boxed)

#==============================================================================
# 12️ References
#==============================================================================

func point(put value) {
    ref = &value;
    return ref;
}
# Example: point(123) => reference to 123
# Example: point("Hello") => reference to "Hello"

func read(ref ref) {
    return *ref;
}
# Example: read(ref) => value pointed by ref
# Example: read(ref) => null (if ref is null)

# Binary Operations Support
# These functions support binary operations:
# plus: 5 + 3 => 8
# minus: 10 - 3 => 7
# times: 4 * 3 => 12
# by: 10 / 2 => 5
# join: "Hello" + "World" => "HelloWorld"

# Type Conversion Support
# These functions handle type conversion:
# isNum: converts to number if possible
# isText: converts to string if possible
# isArray: checks if value is array

# Error Handling
# These functions include error handling:
# by: checks for division by zero
# take: checks for empty array
# read: checks for null reference

# Memory Management
# These functions handle memory:
# save/load: persistent storage
# put/get: temporary storage
# point/read: reference management
