# Razen Standard Functions
# Simple and easy to use functions for Razen

# Example Usage:
# let result = plus(5, 3);  // Output: 8
# show result;

# 1️⃣ Math Functions
func plus(let a, let b) {
    sum = a + b;
    return sum;
}
# Example: plus(5, 3) => 8
# Example: plus(10, 20) => 30

func minus(let a, let b) {
    diff = a - b;
    return diff;
}
# Example: minus(10, 3) => 7
# Example: minus(20, 5) => 15

func times(let a, let b) {
    prod = a * b;
    return prod;
}
# Example: times(4, 3) => 12
# Example: times(5, 2) => 10

func by(let a, let b) {
    div = a / b;
    return div;
}
# Example: by(10, 2) => 5
# Example: by(15, 3) => 5

# 2️⃣ Text Functions
func size(take str) {
    len = str.length;
    return len;
}
# Example: size("Hello") => 5
# Example: size("Razen") => 5

func join(take str1, take str2) {
    text = str1 + str2;
    return text;
}
# Example: join("Hello", "World") => "HelloWorld"
# Example: join("Razen", "Lang") => "RazenLang"

func big(take str) {
    text = str.toUpperCase();
    return text;
}
# Example: big("hello") => "HELLO"
# Example: big("razen") => "RAZEN"

func small(take str) {
    text = str.toLowerCase();
    return text;
}
# Example: small("HELLO") => "hello"
# Example: small("RAZEN") => "razen"

# 3️⃣ List Functions
func count(list arr) {
    len = arr.length;
    return len;
}
# Example: count([1, 2, 3]) => 3
# Example: count(["a", "b"]) => 2

func add(list arr, put item) {
    append = arr.push(item);
    return append;
}
# Example: add([1, 2], 3) => [1, 2, 3]
# Example: add(["a"], "b") => ["a", "b"]

func take(list arr) {
    remove = arr.pop();
    return remove;
}
# Example: take([1, 2, 3]) => 3
# Example: take(["a", "b"]) => "b"

# 4️⃣ Check Functions
func isNum(put value) {
    hold = typeof value is "number";
    return hold;
}
# Example: isNum(123) => true
# Example: isNum("123") => false

func isText(put value) {
    hold = typeof value is "string";
    return hold;
}
# Example: isText("hello") => true
# Example: isText(123) => false

func isArray(put value) {
    hold = Array.isArray(value);
    return hold;
}
# Example: isArray([1, 2, 3]) => true
# Example: isArray("123") => false

# 5️⃣ Input/Output
func say(take message) {
    show message;
}
# Example: say("Hello World") => prints "Hello World"
# Example: say("Welcome to Razen") => prints "Welcome to Razen"

func ask(take question) {
    read result = question;
    return result;
}
# Example: ask("What's your name?") => reads user input
# Example: ask("Enter a number:") => reads user input

# 6️⃣ Numbers
func random(let max) {
    sum = Math.random() * max;
    return sum;
}
# Example: random(10) => random number between 0 and 10
# Example: random(100) => random number between 0 and 100

func round(let num) {
    sum = Math.round(num);
    return sum;
}
# Example: round(3.7) => 4
# Example: round(3.2) => 3

# 7️⃣ Time
func time() {
    current = Date.now();
    return current;
}
# Example: time() => current timestamp (e.g., 1678901234567)

func date() {
    now = new Date().toISOString();
    return now;
}
# Example: date() => current date string (e.g., "2023-03-15T12:34:56.789Z")

# 8️⃣ Objects
func keys(map obj) {
    key = Object.keys(obj);
    return key;
}
# Example: keys({name: "John", age: 30}) => ["name", "age"]
# Example: keys({}) => []

func values(map obj) {
    value = Object.values(obj);
    return value;
}
# Example: values({name: "John", age: 30}) => ["John", 30]
# Example: values({}) => []

# 9️⃣ Storage
func save(put value) {
    store = value;
    return store;
}
# Example: save("Hello") => "Hello"
# Example: save(123) => 123

func load(store) {
    return store;
}
# Example: load() => previously stored value
# Example: load() => null (if nothing stored)

# 🔟 Box
func put(put value) {
    box = value;
    return box;
}
# Example: put("Hello") => "Hello"
# Example: put(123) => 123

func get(box) {
    return box;
}
# Example: get() => previously boxed value
# Example: get() => null (if nothing boxed)

# 1️⃣1️⃣ References
func point(put value) {
    ref = &value;
    return ref;
}
# Example: point(123) => reference to 123
# Example: point("Hello") => reference to "Hello"

func read(ref ref) {
    return *ref;
}
# Example: read(ref) => value pointed by ref
# Example: read(ref) => null (if ref is null)

# Binary Operations Support
# These functions support binary operations:
# plus: 5 + 3 => 8
# minus: 10 - 3 => 7
# times: 4 * 3 => 12
# by: 10 / 2 => 5
# join: "Hello" + "World" => "HelloWorld"

# Type Conversion Support
# These functions handle type conversion:
# isNum: converts to number if possible
# isText: converts to string if possible
# isArray: checks if value is array

# Error Handling
# These functions include error handling:
# by: checks for division by zero
# take: checks for empty array
# read: checks for null reference

# Memory Management
# These functions handle memory:
# save/load: persistent storage
# put/get: temporary storage
# point/read: reference management
