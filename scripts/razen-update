#!/usr/bin/env bash
# Razen Language Update Utility
# Copyright 2025 Prathmesh Barot, Basai Corporation
# Version: beta v0.1.657 (Colours & Installers & Updaters updated properly.)

# Colors for terminal output
GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
PURPLE="\033[0;35m"
CYAN="\033[0;36m"
NC="\033[0m" # No Color

# Repository URL
RAZEN_REPO="https://raw.githubusercontent.com/BasaiCorp/Razen-Lang/main"

# Print banner
echo -e "${BLUE}"
echo "██████╗  █████╗ ███████╗███████╗███╗   ██╗"
echo "██╔══██╗██╔══██╗╚══███╔╝██╔════╝████╗  ██║"
echo "██████╔╝███████║  ███╔╝ █████╗  ██╔██╗ ██║"
echo "██╔══██╗██╔══██║ ███╔╝  ██╔══╝  ██║╚██╗██║"
echo "██║  ██║██║  ██║███████╗███████╗██║ ╚████║"
echo "╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═══╝"
echo -e "${NC}"
echo -e "${YELLOW}Razen Update Utility${NC}"
echo -e "${CYAN}By Prathmesh Barot, Basai Corporation${NC}"
echo -e "${YELLOW}Copyright 2025 Prathmesh Barot${NC}\n"
sleep 1

# Function to detect OS
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    elif [[ "$OSTYPE" == "cygwin" || "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
        echo "windows"
    else
        echo "unknown"
    fi
}

# Detect OS
OS=$(detect_os)

# Function to find installation path
find_install_path() {
    if [ "$OS" == "linux" ]; then
        if [ -d "/usr/local/lib/razen" ]; then
            echo "/usr/local/lib/razen"
        elif [ -d "$HOME/.local/lib/razen" ]; then
            echo "$HOME/.local/lib/razen"
        else
            echo ""
        fi
    elif [ "$OS" == "macos" ]; then
        if [ -d "/usr/local/razen" ]; then
            echo "/usr/local/razen"
        elif [ -d "$HOME/.local/lib/razen" ]; then
            echo "$HOME/.local/lib/razen"
        else
            echo ""
        fi
    elif [ "$OS" == "windows" ]; then
        if [ -d "/mnt/c/Program Files/Razen" ]; then
            echo "/mnt/c/Program Files/Razen"
        else
            echo ""
        fi
    else
        echo ""
    fi
}

# Function to find bin directory
find_bin_path() {
    if [ -L "/usr/local/bin/razen" ]; then
        echo "/usr/local/bin"
    elif [ -L "/usr/bin/razen" ]; then
        echo "/usr/bin"
    elif [ -L "$HOME/.local/bin/razen" ]; then
        echo "$HOME/.local/bin"
    else
        echo ""
    fi
}

# Function to check internet connectivity
check_internet() {
    echo -e "${YELLOW}Checking internet connectivity...${NC}"
    if ! ping -c 1 github.com &>/dev/null && ! ping -c 1 google.com &>/dev/null; then
        echo -e "${RED}Error: No internet connection detected.${NC}"
        echo -e "${YELLOW}Please check your network connection and try again.${NC}"
        return 1
    fi
    echo -e "  ${GREEN}✓${NC} Internet connection detected"
    return 0
}

# Find installation path
INSTALL_PATH=$(find_install_path)

if [ -z "$INSTALL_PATH" ]; then
    echo -e "${RED}Error: Razen installation not found.${NC}"
    echo -e "${YELLOW}Please install Razen first.${NC}"
    exit 1
fi

# Find bin directory
BIN_PATH=$(find_bin_path)

if [ -z "$BIN_PATH" ]; then
    echo -e "${YELLOW}Warning: Razen symbolic links not found in standard locations.${NC}"
    echo -e "${YELLOW}Symbolic links will be recreated during update.${NC}"
fi

# Check internet connectivity
check_internet || exit 1

# Get current version
if [ -f "$INSTALL_PATH/version" ]; then
    CURRENT_VERSION=$(cat "$INSTALL_PATH/version" | tr -d '\r\n')
    echo -e "${YELLOW}Current version: ${GREEN}$CURRENT_VERSION${NC}"
else
    echo -e "${RED}Error: Version file not found.${NC}"
    echo -e "${YELLOW}This may indicate a corrupted installation.${NC}"
    CURRENT_VERSION="unknown"
fi

# Create temporary directory
TMP_DIR=$(mktemp -d)
echo -e "${YELLOW}Checking for updates...${NC}"

# Download latest version information
if ! curl -s -o "$TMP_DIR/version.txt" "$RAZEN_REPO/version"; then
    echo -e "${RED}Error: Failed to check for updates.${NC}"
    echo -e "${YELLOW}Please check your internet connection.${NC}"
    rm -rf "$TMP_DIR"
    exit 1
fi

# Get latest version
LATEST_VERSION=$(cat "$TMP_DIR/version.txt" | tr -d '\r\n')
echo -e "${YELLOW}Latest version: ${GREEN}$LATEST_VERSION${NC}"

# Compare versions
if [ "$LATEST_VERSION" == "$CURRENT_VERSION" ] && [ "$1" != "--force" ]; then
    echo -e "${GREEN}Razen is already up to date.${NC}"
    rm -rf "$TMP_DIR"
    exit 0
else
    if [ "$1" == "--force" ]; then
        echo -e "${YELLOW}Force update requested.${NC}"
    else
        echo -e "${YELLOW}New version available: $LATEST_VERSION${NC}"
        echo -e "${YELLOW}Current version: $CURRENT_VERSION${NC}"
        
        read -p "Do you want to update Razen? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${BLUE}Update cancelled.${NC}"
            rm -rf "$TMP_DIR"
            exit 0
        fi
    fi
    
    echo -e "${YELLOW}Updating Razen from version $CURRENT_VERSION to $LATEST_VERSION...${NC}"
    
    # Create necessary directories in temp folder
    mkdir -p "$TMP_DIR/src"
    mkdir -p "$TMP_DIR/scripts"
    mkdir -p "$TMP_DIR/properties"
    mkdir -p "$TMP_DIR/examples"
    mkdir -p "$TMP_DIR/razen-vscode-extension"
    mkdir -p "$TMP_DIR/razen-jetbrain-plugin"
    echo -e "  ${GREEN}✓${NC} Created temporary directories"
    
    # Function to download directory contents
    download_directory() {
        local dir_name=$1
        local target_dir=$2
        local files_count=0
        local success_count=0
        
        echo -e "${YELLOW}Downloading all files from $dir_name folder...${NC}"
        
        # Create target directory if it doesn't exist
        mkdir -p "$target_dir" 2>/dev/null
        
        # GitHub raw content doesn't support directory listing, so we'll use the fallback list
        # and try to download each file individually
        
        # Define the known files for each directory
        case "$dir_name" in
            "properties")
                local files="variables.rzn keywords.rzn operators.rzn functions.rzn loops.rzn conditionals.rzn types.rzn api.rzn syntax.rzn usage.rzn"
                ;;
            "scripts")
                local files="razen razen-debug razen-test razen-run razen-update razen-help razen-docs razen-extension razen-autogen razen-run-debug"
                ;;
            "src")
                local files="main.rs compiler.rs parser.rs lexer.rs interpreter.rs ast.rs token.rs value.rs library.rs functions.rs"
                ;;
            "examples")
                local files="hello.rzn calculator.rzn web-example/script.rzn quiz.rzn guess.rzn 12-16.rzn return.rzn example.rzn web-example/index.html web-example/style.css library_test.rzn color_test.rzn purchase.rzn order.rzn"
                ;;
            "razen-vscode-extension")
                local files="package.json syntaxes/razen.tmLanguage.json language-configuration/language-configuration.json README.md snippets/razen.json src/extension.js src/razenLanguageData.js src/test.rzn icons/razen-icon.png icons/razen-icon.svg"
                ;;
            "razen-jetbrain-plugin")
                local files="plugin.xml build.gradle settings.gradle src/main/resources/META-INF/plugin.xml"
                ;;
            *)
                local files=""
                ;;
        esac
        
        if [ -z "$files" ]; then
            echo -e "  ${YELLOW}No known files for directory $dir_name${NC}"
            return 0
        fi
        
        echo -e "  ${CYAN}Downloading known files from repository...${NC}"
        
        # Download each file from the list
        for file in $files; do
            files_count=$((files_count + 1))
            # Create subdirectories if needed
            mkdir -p "$target_dir/$(dirname "$file")" 2>/dev/null
            echo -e "    ${CYAN}Downloading${NC} $file"
            
            # Try to download the file
            if curl -s --retry 3 --retry-delay 2 -o "$target_dir/$file" "$RAZEN_REPO/$dir_name/$file" &>/dev/null; then
                # Check if the file was actually downloaded and has content
                if [ -s "$target_dir/$file" ]; then
                    success_count=$((success_count + 1))
                    echo -e "    ${GREEN}✓${NC} Downloaded $file"
                    # Make scripts executable if they're in the scripts directory
                    if [ "$dir_name" = "scripts" ]; then
                        chmod +x "$target_dir/$file"
                    fi
                    
                    # Special handling for functions.rs - download functions directory
                    if [[ "$dir_name" == "src" && "$file" == "functions.rs" ]]; then
                        echo -e "    ${CYAN}Detected functions.rs, downloading functions directory...${NC}"
                        mkdir -p "$target_dir/functions" 2>/dev/null
                        local function_files="arrlib.rs mathlib.rs strlib.rs randomlib.rs filelib.rs jsonlib.rs boltlib.rs seedlib.rs colorlib.rs cryptolib.rs regexlib.rs uuidlib.rs oslib.rs validationlib.rs systemlib.rs boxutillib.rs loglib.rs htlib.rs netlib.rs timelib.rs color.rs"
                        for func_file in $function_files; do
                            echo -e "    ${CYAN}Downloading${NC} functions/$func_file"
                            if curl -s --retry 3 --retry-delay 2 -o "$target_dir/functions/$func_file" "$RAZEN_REPO/src/functions/$func_file" &>/dev/null; then
                                success_count=$((success_count + 1))
                                echo -e "    ${GREEN}✓${NC} Downloaded functions/$func_file"
                            else
                                echo -e "    ${RED}✗${NC} Failed to download functions/$func_file"
                            fi
                        done
                        # Make sure we count the functions directory as a success
                        files_count=$((files_count + 1))
                        success_count=$((success_count + 1))
                    fi
                    
                    # Special handling for properties directory - download libs directory
                    if [[ "$dir_name" == "properties" && "$file" == "functions.rzn" ]]; then
                        echo -e "    ${CYAN}Detected functions.rzn, downloading libs directory...${NC}"
                        mkdir -p "$target_dir/libs" 2>/dev/null
                        local lib_files="arrlib.rzn strlib.rzn mathlib.rzn random.rzn file.rzn json.rzn bolt.rzn seed.rzn color.rzn crypto.rzn regex.rzn uuid.rzn os.rzn validation.rzn system.rzn boxlib.rzn loglib.rzn htlib.rzn netlib.rzn timelib.rzn"
                        for lib_file in $lib_files; do
                            echo -e "    ${CYAN}Downloading${NC} libs/$lib_file"
                            if curl -s --retry 3 --retry-delay 2 -o "$target_dir/libs/$lib_file" "$RAZEN_REPO/properties/libs/$lib_file" &>/dev/null; then
                                success_count=$((success_count + 1))
                                echo -e "    ${GREEN}✓${NC} Downloaded libs/$lib_file"
                            else
                                echo -e "    ${RED}✗${NC} Failed to download libs/$lib_file"
                            fi
                        done
                    fi
                else
                    # File exists but is empty (likely a 404 page)
                    rm "$target_dir/$file" # Remove empty file
                    echo -e "    ${RED}✗${NC} Failed to download $file (empty file)"
                fi
            else
                echo -e "    ${RED}✗${NC} Failed to download $file"
            fi
        done
        
        # If no files were downloaded, try to use local files
        if [ $success_count -eq 0 ]; then
            echo -e "  ${YELLOW}No files downloaded from repository, checking local installation...${NC}"
            if [ -d "/usr/local/lib/razen/$dir_name" ]; then
                echo -e "  ${CYAN}Using files from local installation...${NC}"
                cp -r "/usr/local/lib/razen/$dir_name/"* "$target_dir/" 2>/dev/null
                local copied_count=$(find "$target_dir" -type f | wc -l)
                if [ $copied_count -gt 0 ]; then
                    echo -e "  ${GREEN}✓${NC} Copied $copied_count files from local installation"
                    success_count=$copied_count
                else
                    echo -e "  ${RED}✗${NC} No files found in local installation"
                fi
            else
                echo -e "  ${RED}✗${NC} Directory not found in local installation"
            fi
        fi
        
        if [ $success_count -eq 0 ]; then
            echo -e "  ${RED}✗${NC} Failed to download any files from $dir_name/"
            return 1
        else
            echo -e "  ${GREEN}✓${NC} Downloaded $success_count/$files_count files from $dir_name/"
            return 0
        fi
    }
    
    # Download Razen compiler binary
    echo -e "${YELLOW}Downloading Razen compiler binary...${NC}"
    if ! curl -s --retry 3 --retry-delay 2 -o "$TMP_DIR/razen_compiler" "$RAZEN_REPO/target/release/razen_compiler" &>/dev/null; then
        echo -e "${RED}Failed to download Razen compiler binary.${NC}"
        echo -e "${YELLOW}Keeping existing binary.${NC}"
        
        # Copy existing binary if available
        if [ -f "/usr/local/bin/razen_compiler" ]; then
            cp "/usr/local/bin/razen_compiler" "$TMP_DIR/razen_compiler"
            echo -e "  ${GREEN}✓${NC} Copied existing compiler binary"
        elif [ -f "$HOME/.local/bin/razen_compiler" ]; then
            cp "$HOME/.local/bin/razen_compiler" "$TMP_DIR/razen_compiler"
            echo -e "  ${GREEN}✓${NC} Copied existing compiler binary"
        else
            echo -e "${RED}Error: Could not find existing compiler binary.${NC}"
            rm -rf "$TMP_DIR"
            exit 1
        fi
    else
        echo -e "  ${GREEN}✓${NC} Downloaded Razen compiler binary"
    fi
    
    # Make the binary executable
    chmod +x "$TMP_DIR/razen_compiler" || {
        echo -e "${RED}Error: Failed to make binary executable.${NC}"
        rm -rf "$TMP_DIR"
        exit 1
    }
    
    # Download each directory
    download_directory "properties" "$TMP_DIR/properties"
    download_directory "scripts" "$TMP_DIR/scripts"
    download_directory "src" "$TMP_DIR/src"
    
    # Handle src/functions directory separately if it wasn't already downloaded
    if [ ! -d "$TMP_DIR/src/functions" ]; then
        echo -e "${YELLOW}Ensuring functions directory is properly downloaded...${NC}"
        mkdir -p "$TMP_DIR/src/functions" 2>/dev/null
        local function_files="arrlib.rs mathlib.rs strlib.rs randomlib.rs filelib.rs jsonlib.rs boltlib.rs seedlib.rs colorlib.rs cryptolib.rs regexlib.rs uuidlib.rs oslib.rs validationlib.rs systemlib.rs boxutillib.rs loglib.rs htlib.rs netlib.rs timelib.rs color.rs"
        for func_file in $function_files; do
            echo -e "    ${CYAN}Downloading${NC} functions/$func_file"
            if curl -s --retry 3 --retry-delay 2 -o "$TMP_DIR/src/functions/$func_file" "$RAZEN_REPO/src/functions/$func_file" &>/dev/null; then
                echo -e "    ${GREEN}✓${NC} Downloaded functions/$func_file"
            else
                echo -e "    ${RED}✗${NC} Failed to download functions/$func_file"
            fi
        done
        echo -e "  ${GREEN}✓${NC} Completed functions directory download"
    fi
    
    # Handle properties/libs directory separately if it wasn't already downloaded
    if [ ! -d "$TMP_DIR/properties/libs" ]; then
        echo -e "${YELLOW}Ensuring libs directory is properly downloaded...${NC}"
        mkdir -p "$TMP_DIR/properties/libs" 2>/dev/null
        local lib_files="arrlib.rzn strlib.rzn mathlib.rzn random.rzn file.rzn json.rzn bolt.rzn seed.rzn color.rzn crypto.rzn regex.rzn uuid.rzn os.rzn validation.rzn system.rzn boxlib.rzn loglib.rzn htlib.rzn netlib.rzn timelib.rzn"
        for lib_file in $lib_files; do
            echo -e "    ${CYAN}Downloading${NC} libs/$lib_file"
            if curl -s --retry 3 --retry-delay 2 -o "$TMP_DIR/properties/libs/$lib_file" "$RAZEN_REPO/properties/libs/$lib_file" &>/dev/null; then
                echo -e "    ${GREEN}✓${NC} Downloaded libs/$lib_file"
            else
                echo -e "    ${RED}✗${NC} Failed to download libs/$lib_file"
            fi
        done
        echo -e "  ${GREEN}✓${NC} Completed libs directory download"
    fi
    
    download_directory "examples" "$TMP_DIR/examples"
    download_directory "razen-vscode-extension" "$TMP_DIR/razen-vscode-extension"
    download_directory "razen-jetbrain-plugin" "$TMP_DIR/razen-jetbrain-plugin"
    
    # List of all scripts that need to be executable
    SCRIPTS="razen razen-debug razen-test razen-run razen-update razen-help razen-docs razen-extension"
    
    # Make scripts executable if they exist
    for script in $SCRIPTS; do
        if [ -f "$TMP_DIR/scripts/$script" ]; then
            chmod +x "$TMP_DIR/scripts/$script"
            echo -e "  ${GREEN}✓${NC} Made $script executable"
        fi
    done
    
    # Save the version file
    echo "$LATEST_VERSION" > "$TMP_DIR/version"
    echo -e "  ${GREEN}✓${NC} Created version file: $LATEST_VERSION"
    
    # Function to update compiler binary
    update_compiler() {
        echo -e "${YELLOW}Updating compiler binary...${NC}"
        
        # Check if we need sudo for updating system-wide files
        if [ -w "/usr/local/bin" ]; then
            # We have write permissions, no sudo needed
            cp "$TMP_DIR/razen_compiler" "/usr/local/bin/razen_compiler"
            chmod +x "/usr/local/bin/razen_compiler"
        else
            # Need sudo for system-wide files
            echo -e "${YELLOW}Updating system-wide files. This may require sudo privileges...${NC}"
            
            # Try to update with sudo
            if sudo cp "$TMP_DIR/razen_compiler" "/usr/local/bin/razen_compiler" \
                && sudo chmod +x "/usr/local/bin/razen_compiler"; then
                echo -e "  ${GREEN}✓${NC} Updated compiler binary"
            else
                # If sudo fails, try to update in user's bin directory
                USER_BIN_DIR="$HOME/.local/bin"
                mkdir -p "$USER_BIN_DIR"
                cp "$TMP_DIR/razen_compiler" "$USER_BIN_DIR/razen_compiler"
                chmod +x "$USER_BIN_DIR/razen_compiler"
                echo -e "  ${YELLOW}Warning: Could not update system-wide binary. Installed in user's bin directory instead.${NC}"
                echo -e "  ${YELLOW}You may need to restart your terminal for changes to take effect.${NC}"
            fi
        fi
    }
    
    # Check for sudo privileges early
    if [ ! -w "/usr/local/bin" ] && ! sudo -v &>/dev/null; then
        echo -e "${YELLOW}Note: This script may require sudo privileges to update system-wide files.${NC}"
        echo -e "${YELLOW}If you don't have sudo access, the update will be installed in your user's bin directory.${NC}"
    fi
    
    # Update compiler binary
    update_compiler
    
    # Function to safely update directory with sudo if needed
    safe_update_directory() {
        local source_dir=$1
        local target_dir=$2
        local dir_name=$3
        
        echo -e "${YELLOW}Updating $dir_name files...${NC}"
        
        # Check if source directory has files
        if [ ! "$(ls -A "$source_dir" 2>/dev/null)" ]; then
            echo -e "  ${YELLOW}No files found in $source_dir, skipping update${NC}"
            return 0
        fi
        
        # Check if target directory exists
        if [ ! -d "$target_dir" ]; then
            echo -e "  ${CYAN}Creating $dir_name directory...${NC}"
            if [ -w "$(dirname "$target_dir")" ]; then
                mkdir -p "$target_dir"
            else
                sudo mkdir -p "$target_dir"
            fi
        fi
        
        # Copy files with proper permissions
        if [ -w "$target_dir" ]; then
            cp -r "$source_dir/"* "$target_dir/" 2>/dev/null
            if [ $? -eq 0 ]; then
                echo -e "  ${GREEN}✓${NC} Updated $dir_name files"
            else
                echo -e "  ${YELLOW}No files to update in $dir_name${NC}"
            fi
        else
            # Need sudo
            sudo cp -r "$source_dir/"* "$target_dir/" 2>/dev/null
            if [ $? -eq 0 ]; then
                echo -e "  ${GREEN}✓${NC} Updated $dir_name files (with sudo)"
            else
                echo -e "  ${YELLOW}No files to update in $dir_name${NC}"
            fi
        fi
    }

    # Update properties files
    safe_update_directory "$TMP_DIR/properties" "/usr/local/lib/razen/properties" "properties"
    
    # Ensure libs directory is properly updated
    if [ -d "$TMP_DIR/properties/libs" ]; then
        echo -e "${YELLOW}Ensuring libs directory is properly updated...${NC}"
        if [ -w "/usr/local/lib/razen/properties" ]; then
            mkdir -p "/usr/local/lib/razen/properties/libs" 2>/dev/null
            cp -r "$TMP_DIR/properties/libs/"* "/usr/local/lib/razen/properties/libs/" 2>/dev/null
            echo -e "  ${GREEN}✓${NC} Updated libs directory"
        else
            sudo mkdir -p "/usr/local/lib/razen/properties/libs" 2>/dev/null
            sudo cp -r "$TMP_DIR/properties/libs/"* "/usr/local/lib/razen/properties/libs/" 2>/dev/null
            echo -e "  ${GREEN}✓${NC} Updated libs directory (with sudo)"
        fi
    fi

    # Update scripts
    safe_update_directory "$TMP_DIR/scripts" "/usr/local/lib/razen/scripts" "scripts"

    # Update source files
    safe_update_directory "$TMP_DIR/src" "/usr/local/lib/razen/src" "source"
    
    # Ensure functions directory is properly updated
    if [ -d "$TMP_DIR/src/functions" ]; then
        echo -e "${YELLOW}Ensuring functions directory is properly updated...${NC}"
        if [ -w "/usr/local/lib/razen/src" ]; then
            mkdir -p "/usr/local/lib/razen/src/functions" 2>/dev/null
            cp -r "$TMP_DIR/src/functions/"* "/usr/local/lib/razen/src/functions/" 2>/dev/null
            echo -e "  ${GREEN}✓${NC} Updated functions directory"
        else
            sudo mkdir -p "/usr/local/lib/razen/src/functions" 2>/dev/null
            sudo cp -r "$TMP_DIR/src/functions/"* "/usr/local/lib/razen/src/functions/" 2>/dev/null
            echo -e "  ${GREEN}✓${NC} Updated functions directory (with sudo)"
        fi
    else
        echo -e "${YELLOW}Warning: src/functions directory not found in downloaded files${NC}"
        echo -e "${CYAN}Attempting to download functions directory directly...${NC}"
        mkdir -p "$TMP_DIR/src/functions" 2>/dev/null
        local function_files="arrlib.rs mathlib.rs strlib.rs randomlib.rs filelib.rs jsonlib.rs boltlib.rs seedlib.rs colorlib.rs cryptolib.rs regexlib.rs uuidlib.rs oslib.rs validationlib.rs systemlib.rs boxutillib.rs loglib.rs htlib.rs netlib.rs timelib.rs color.rs"
        local downloaded_count=0
        local total_files=0
        
        for func_file in $function_files; do
            total_files=$((total_files + 1))
            if curl -s --retry 3 --retry-delay 2 -o "$TMP_DIR/src/functions/$func_file" "$RAZEN_REPO/src/functions/$func_file" &>/dev/null; then
                downloaded_count=$((downloaded_count + 1))
                echo -e "  ${GREEN}✓${NC} Downloaded $func_file"
            else
                echo -e "  ${RED}✗${NC} Failed to download $func_file"
            fi
        done
        
        echo -e "  ${GREEN}✓${NC} Downloaded $downloaded_count/$total_files function files"
        
        # Now copy the downloaded files
        if [ -w "/usr/local/lib/razen/src" ]; then
            mkdir -p "/usr/local/lib/razen/src/functions" 2>/dev/null
            cp -r "$TMP_DIR/src/functions/"* "/usr/local/lib/razen/src/functions/" 2>/dev/null
            echo -e "  ${GREEN}✓${NC} Updated functions directory"
        else
            sudo mkdir -p "/usr/local/lib/razen/src/functions" 2>/dev/null
            sudo cp -r "$TMP_DIR/src/functions/"* "/usr/local/lib/razen/src/functions/" 2>/dev/null
            echo -e "  ${GREEN}✓${NC} Updated functions directory (with sudo)"
        fi
    fi

    # Update examples
    safe_update_directory "$TMP_DIR/examples" "/usr/local/lib/razen/examples" "example"

    # Update extensions if they were downloaded
    if [ -d "$TMP_DIR/razen-vscode-extension" ] && [ "$(ls -A "$TMP_DIR/razen-vscode-extension" 2>/dev/null)" ]; then
        safe_update_directory "$TMP_DIR/razen-vscode-extension" "/usr/local/lib/razen/razen-vscode-extension" "VS Code extension"
        
        # Ensure VSCode extension directories are properly updated
        echo -e "${YELLOW}Ensuring VSCode extension directories are properly updated...${NC}"
        
        # Create src directory
        if [ -w "/usr/local/lib/razen/razen-vscode-extension" ]; then
            mkdir -p "/usr/local/lib/razen/razen-vscode-extension/src" 2>/dev/null
            mkdir -p "/usr/local/lib/razen/razen-vscode-extension/snippets" 2>/dev/null
            mkdir -p "/usr/local/lib/razen/razen-vscode-extension/icons" 2>/dev/null
            mkdir -p "/usr/local/lib/razen/razen-vscode-extension/language-configuration" 2>/dev/null
            mkdir -p "/usr/local/lib/razen/razen-vscode-extension/syntaxes" 2>/dev/null
            
            # Copy specific files if they exist
            if [ -d "$TMP_DIR/razen-vscode-extension/src" ]; then
                cp -r "$TMP_DIR/razen-vscode-extension/src/"* "/usr/local/lib/razen/razen-vscode-extension/src/" 2>/dev/null
            fi
            if [ -d "$TMP_DIR/razen-vscode-extension/snippets" ]; then
                cp -r "$TMP_DIR/razen-vscode-extension/snippets/"* "/usr/local/lib/razen/razen-vscode-extension/snippets/" 2>/dev/null
            fi
            if [ -d "$TMP_DIR/razen-vscode-extension/icons" ]; then
                cp -r "$TMP_DIR/razen-vscode-extension/icons/"* "/usr/local/lib/razen/razen-vscode-extension/icons/" 2>/dev/null
            fi
            if [ -d "$TMP_DIR/razen-vscode-extension/language-configuration" ]; then
                cp -r "$TMP_DIR/razen-vscode-extension/language-configuration/"* "/usr/local/lib/razen/razen-vscode-extension/language-configuration/" 2>/dev/null
            fi
            if [ -d "$TMP_DIR/razen-vscode-extension/syntaxes" ]; then
                cp -r "$TMP_DIR/razen-vscode-extension/syntaxes/"* "/usr/local/lib/razen/razen-vscode-extension/syntaxes/" 2>/dev/null
            fi
            echo -e "  ${GREEN}✓${NC} Updated VSCode extension subdirectories"
        else
            sudo mkdir -p "/usr/local/lib/razen/razen-vscode-extension/src" 2>/dev/null
            sudo mkdir -p "/usr/local/lib/razen/razen-vscode-extension/snippets" 2>/dev/null
            sudo mkdir -p "/usr/local/lib/razen/razen-vscode-extension/icons" 2>/dev/null
            sudo mkdir -p "/usr/local/lib/razen/razen-vscode-extension/language-configuration" 2>/dev/null
            sudo mkdir -p "/usr/local/lib/razen/razen-vscode-extension/syntaxes" 2>/dev/null
            
            # Copy specific files if they exist
            if [ -d "$TMP_DIR/razen-vscode-extension/src" ]; then
                sudo cp -r "$TMP_DIR/razen-vscode-extension/src/"* "/usr/local/lib/razen/razen-vscode-extension/src/" 2>/dev/null
            fi
            if [ -d "$TMP_DIR/razen-vscode-extension/snippets" ]; then
                sudo cp -r "$TMP_DIR/razen-vscode-extension/snippets/"* "/usr/local/lib/razen/razen-vscode-extension/snippets/" 2>/dev/null
            fi
            if [ -d "$TMP_DIR/razen-vscode-extension/icons" ]; then
                sudo cp -r "$TMP_DIR/razen-vscode-extension/icons/"* "/usr/local/lib/razen/razen-vscode-extension/icons/" 2>/dev/null
            fi
            if [ -d "$TMP_DIR/razen-vscode-extension/language-configuration" ]; then
                sudo cp -r "$TMP_DIR/razen-vscode-extension/language-configuration/"* "/usr/local/lib/razen/razen-vscode-extension/language-configuration/" 2>/dev/null
            fi
            if [ -d "$TMP_DIR/razen-vscode-extension/syntaxes" ]; then
                sudo cp -r "$TMP_DIR/razen-vscode-extension/syntaxes/"* "/usr/local/lib/razen/razen-vscode-extension/syntaxes/" 2>/dev/null
            fi
            echo -e "  ${GREEN}✓${NC} Updated VSCode extension subdirectories (with sudo)"
        fi
    fi

    if [ -d "$TMP_DIR/razen-jetbrain-plugin" ] && [ "$(ls -A "$TMP_DIR/razen-jetbrain-plugin" 2>/dev/null)" ]; then
        safe_update_directory "$TMP_DIR/razen-jetbrain-plugin" "/usr/local/lib/razen/razen-jetbrain-plugin" "JetBrains plugin"
    fi
    
    # Update version file
    echo -e "${YELLOW}Updating version information...${NC}"
    if [ -w "/usr/local/lib/razen" ]; then
        echo "$LATEST_VERSION" > "/usr/local/lib/razen/version"
    else
        # Using sudo with echo requires a different approach
        echo "$LATEST_VERSION" | sudo tee "/usr/local/lib/razen/version" > /dev/null
    fi
    echo -e "  ${GREEN}✓${NC} Updated version information: $LATEST_VERSION"
    
    # Function to recreate symbolic links
    recreate_symlinks() {
        echo -e "${YELLOW}Recreating symbolic links...${NC}"
        
        # Find all executable files in the scripts directory
        if [ ! -d "/usr/local/lib/razen/scripts" ]; then
            echo -e "  ${RED}✗${NC} Scripts directory not found"
            return 1
        fi
        
        # Get a list of all executable files in the scripts directory
        SCRIPTS=$(find "/usr/local/lib/razen/scripts" -type f -executable -exec basename {} \; 2>/dev/null)
        
        if [ -z "$SCRIPTS" ]; then
            echo -e "  ${RED}✗${NC} No executable scripts found"
            return 1
        fi
        
        # Determine the appropriate bin directory
        if [ -n "$BIN_PATH" ]; then
            local target_bin="$BIN_PATH"
        elif [ -w "/usr/local/bin" ]; then
            local target_bin="/usr/local/bin"
        elif [ -w "$HOME/.local/bin" ]; then
            local target_bin="$HOME/.local/bin"
        else
            # Create user bin directory if it doesn't exist
            mkdir -p "$HOME/.local/bin"
            local target_bin="$HOME/.local/bin"
            
            # Add to PATH if not already there
            if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
                echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.bashrc"
                echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.profile"
                echo -e "${YELLOW}Added $HOME/.local/bin to your PATH. Please restart your terminal after update.${NC}"
            fi
        fi
        
        echo -e "${YELLOW}Using bin directory: ${CYAN}$target_bin${NC}"
        
        # Create symlinks in the bin directory
        local missing_links=0
        local link_count=0
        
        for script in $SCRIPTS; do
            script_path="/usr/local/lib/razen/scripts/$script"
            if [ -f "$script_path" ] && [ -x "$script_path" ]; then
                if [ -w "$target_bin" ]; then
                    # Direct creation if we have write permissions
                    ln -sf "$script_path" "$target_bin/$script"
                    echo -e "  ${GREEN}✓${NC} Created $target_bin/$script"
                    link_count=$((link_count + 1))
                else
                    # Use sudo if we don't have direct write permissions
                    if sudo ln -sf "$script_path" "$target_bin/$script"; then
                        echo -e "  ${GREEN}✓${NC} Created $target_bin/$script"
                        link_count=$((link_count + 1))
                    else
                        echo -e "  ${RED}✗${NC} Failed to create symlink in $target_bin/$script (permission denied)"
                        missing_links=$((missing_links + 1))
                    fi
                fi
            fi
        done
        
        # Verify all symlinks are created
        if [ $missing_links -gt 0 ]; then
            echo -e "${RED}Failed to create $missing_links symbolic links. Please check the errors above.${NC}"
            echo -e "${YELLOW}You may need to manually create symlinks or add the scripts directory to your PATH.${NC}"
            return 1
        fi
        
        if [ $link_count -eq 0 ]; then
            echo -e "${RED}No symbolic links were created${NC}"
            return 1
        fi
        
        echo -e "${GREEN}✓${NC} All symbolic links created successfully in $target_bin"
        return 0
    }
    
    # Recreate symbolic links
    recreate_symlinks || {
        echo -e "${YELLOW}Warning: Failed to recreate some symbolic links.${NC}"
        echo -e "${YELLOW}You may need to manually create them.${NC}"
    }
    
    # Clean up
    rm -rf "$TMP_DIR"
    
    echo -e "\n${GREEN}✅ Razen has been successfully updated to version $LATEST_VERSION!${NC}"
    echo -e "\n${YELLOW}Available commands:${NC}"
    echo -e "  ${GREEN}razen${NC} - Run Razen programs"
    echo -e "  ${GREEN}razen-debug${NC} - Run Razen programs in debug mode"
    echo -e "  ${GREEN}razen-test${NC} - Run Razen tests"
    echo -e "  ${GREEN}razen-run${NC} - Run Razen programs with additional options"
    echo -e "  ${GREEN}razen-update${NC} - Update Razen to the latest version"
    echo -e "  ${GREEN}razen-help${NC} - Show help information"
    echo -e "  ${GREEN}razen new myprogram${NC} - Create a new Razen program"
    echo -e "  ${GREEN}razen version${NC} - Show Razen version"
fi