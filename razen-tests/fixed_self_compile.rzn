# Razen Self-Compilation Phase 1 Example
# This file demonstrates the essential features needed for Phase 1 of making Razen self-compiling

# ======================================================================
# SECTION 1: MEMORY MANAGEMENT PRIMITIVES
# ======================================================================

# Import libraries
lib memory;
lib binary;
lib bitwise;
lib syscall;
lib process;
lib thread;
lib compiler;

# 1.1 Pointer Operations
fun pointer_operations() {
    show "=== Pointer Operations ===";
    
    # Variable declaration
    num value = 42;
    
    # Get memory address of a variable
    num ptr = Memory[addressof](value);
    show "Address of value: " + ptr;
    
    # Dereference a pointer to get the value
    num retrieved = Memory[deref](ptr);
    show "Dereferenced value: " + retrieved;
    
    # Pointer arithmetic
    num next_address = Memory[add_offset](ptr, 1);
    show "Next memory address: " + next_address;
}

# 1.2 Memory Allocation
fun memory_allocation() {
    show "=== Memory Allocation ===";
    
    # Allocate memory block (similar to malloc)
    num size = 1024;  # bytes
    num memory_block = Memory[alloc](size);
    show "Allocated " + size + " bytes at address: " + memory_block;
    
    # Write to memory
    Memory[write_byte](memory_block, 0, 65);  # Write 'A' to first byte
    Memory[write_byte](memory_block, 1, 66);  # Write 'B' to second byte
    
    # Read from memory
    num byte1 = Memory[read_byte](memory_block, 0);
    num byte2 = Memory[read_byte](memory_block, 1);
    show "Read bytes: " + byte1 + " " + byte2;
    
    # Free allocated memory
    Memory[free](memory_block);
    show "Memory freed";
}

# 1.3 Buffer Operations
fun buffer_operations() {
    show "=== Buffer Operations ===";
    
    # Create a buffer
    num buffer = Memory[create_buffer](10);
    
    # Write to buffer
    Memory[buffer_write_string](buffer, "Hello");
    
    # Read from buffer
    num content = Memory[buffer_read_string](buffer, 0, 5);
    show "Buffer content: " + content;
    
    # Copy between buffers
    num dest_buffer = Memory[create_buffer](10);
    Memory[buffer_copy](buffer, 0, dest_buffer, 0, 5);
    
    # Read from destination buffer
    num copied = Memory[buffer_read_string](dest_buffer, 0, 5);
    show "Copied content: " + copied;
    
    # Free buffers
    Memory[free_buffer](buffer);
    Memory[free_buffer](dest_buffer);
}

# ======================================================================
# SECTION 2: BINARY FILE OPERATIONS
# ======================================================================

fun binary_file_operations() {
    show "=== Binary File Operations ===";
    
    # Create a binary file
    Binary[create]("test.bin");
    
    # Open file in binary mode
    num file = Binary[open]("test.bin", "wb");
    
    # Write binary data
    num data = [65, 66, 67, 68, 69];  # ASCII values for "ABCDE"
    Binary[write_bytes](file, data);
    
    # Close file
    Binary[close](file);
    
    # Read binary file
    file = Binary[open]("test.bin", "rb");
    num read_data = Binary[read_bytes](file, 5);
    Binary[close](file);
    
    # Display binary data
    show "Read binary data (decimal): " + read_data;
    
    # Convert to string for display
    num str_data = Binary[bytes_to_string](read_data);
    show "Read binary data (as string): " + str_data;
}

# ======================================================================
# SECTION 3: BITWISE OPERATIONS
# ======================================================================

fun bitwise_operations() {
    show "=== Bitwise Operations ===";
    
    # Define test values
    num a = 5;  # 0101 in binary
    num b = 3;  # 0011 in binary
    
    # Bitwise AND
    num and_result = Bitwise[and](a, b);  # 0001 = 1
    show a + " AND " + b + " = " + and_result;
    
    # Bitwise OR
    num or_result = Bitwise[or](a, b);  # 0111 = 7
    show a + " OR " + b + " = " + or_result;
    
    # Bitwise XOR
    num xor_result = Bitwise[xor](a, b);  # 0110 = 6
    show a + " XOR " + b + " = " + xor_result;
    
    # Bitwise NOT (complement)
    num not_result = Bitwise[not](a, 8);  # 11111010 (8-bit complement) = 250
    show "NOT " + a + " = " + not_result;
    
    # Bit shifting
    num left_shift = Bitwise[left_shift](a, 2);  # 0101 << 2 = 10100 = 20
    num right_shift = Bitwise[right_shift](a, 1);  # 0101 >> 1 = 0010 = 2
    
    show a + " << 2 = " + left_shift;
    show a + " >> 1 = " + right_shift;
}

# ======================================================================
# SECTION 4: SYSTEM OPERATIONS
# ======================================================================

fun system_operations() {
    show "=== System Operations ===";
    
    # Get process ID
    num pid = Syscall[getpid]();
    show "Current process ID: " + pid;
    
    # Get current working directory
    num cwd = Syscall[getcwd]();
    show "Current working directory: " + cwd;
    
    # Execute a system command
    num result = Syscall[execute]("echo Hello from system call");
    show "Command result: " + result;
    
    # Get environment variable
    num path = Syscall[getenv]("PATH");
    show "PATH environment variable: " + path;
}

# ======================================================================
# SECTION 5: PROCESS MANAGEMENT
# ======================================================================

fun process_management() {
    show "=== Process Management ===";
    
    # Create a new process
    num pid = Process[create]("echo Child process created");
    show "Created process with PID: " + pid;
    
    # Wait for a process to compnume
    num status = Process[wait](pid);
    show "Process exit status: " + status;
    
    # Get current process information
    num proc_info = Process[info]();
    show "Current process info: " + proc_info;
    
    # Demonstrate signals (just showing the API, not actually sending signals)
    show "Signal API example: Process[signal](pid, 'SIGTERM')";
}

# ======================================================================
# SECTION 6: THREADING
# ======================================================================

fun threading_operations() {
    show "=== Threading Operations ===";
    
    # Thread function would be defined separately
    show "Thread function would be defined separately";
    
    # Create a thread
    num thread_id = Thread[create]("thread_function");
    show "Created thread with ID: " + thread_id;
    
    # Wait for thread compnumion
    Thread[join](thread_id);
    show "Thread joined";
    
    # Thread synchronization primitives
    num mutex = Thread[mutex_create]();
    Thread[mutex_lock](mutex);
    show "Mutex locked";
    Thread[mutex_unlock](mutex);
    show "Mutex unlocked";
}

# ======================================================================
# SECTION 7: COMPILER INFRASTRUCTURE
# ======================================================================

fun compiler_basics() {
    show "=== Compiler Infrastructure Basics ===";
    
    # Create a simple AST node
    num ast_node = Compiler[create_node]("variable", "x", "integer");
    show "Created AST node: " + Compiler[node_to_string](ast_node);
    
    # Create a simple symbol table
    num symbol_table = Compiler[create_symbol_table]();
    Compiler[add_symbol](symbol_table, "x", "integer", 0);
    Compiler[add_symbol](symbol_table, "y", "string", 1);
    
    # Look up a symbol
    num symbol = Compiler[lookup_symbol](symbol_table, "x");
    show "Symbol 'x' info: " + symbol;
    
    # Generate simple IR code
    num ir_code = Compiler[generate_ir]("x = 5 + 3");
    show "Generated IR code: " + ir_code;
}

# ======================================================================
# MAIN PROGRAM
# ======================================================================

# Run all the demonstrations
pointer_operations();
show "";

memory_allocation();
show "";

buffer_operations();
show "";

binary_file_operations();
show "";

bitwise_operations();
show "";

system_operations();
show "";

process_management();
show "";

threading_operations();
show "";

compiler_basics();
show "";
