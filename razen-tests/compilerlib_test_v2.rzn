# Razen Compiler Library Test
# This file tests all functions in the Compiler Library

# Import compiler library
lib compilerlib;

show "===== COMPILER LIBRARY TEST =====";

# Test AST node creation
num ast_node = CompilerLib[create_node]("variable", "x", "integer");
show "Created AST node: " + CompilerLib[node_to_string](ast_node);

# Test adding child nodes
num child_node = CompilerLib[create_node]("literal", "42", "integer");
num add_child_result = CompilerLib[add_child](ast_node, child_node);
show "Add child result: " + add_child_result;
show "AST node with child: " + CompilerLib[node_to_string](ast_node);

# Test symbol table operations
num symbol_table = CompilerLib[create_symbol_table]();
num add_symbol_result1 = CompilerLib[add_symbol](symbol_table, "x", "integer", 0);
num add_symbol_result2 = CompilerLib[add_symbol](symbol_table, "y", "string", 1);
show "Add symbol results: " + add_symbol_result1 + ", " + add_symbol_result2;

num symbol = CompilerLib[lookup_symbol](symbol_table, "x");
show "Symbol 'x' info: " + symbol;

# Test code generation
num ir_code = CompilerLib[generate_ir]("x = 5 + 3");
show "IR code: " + ir_code;

num optimized_ir = CompilerLib[optimize_ir](ir_code);
show "Optimized IR: " + optimized_ir;

num assembly = CompilerLib[generate_assembly](optimized_ir);
show "Assembly code: " + assembly;

# Test tokenizing, parsing, and compiling
num test_code = "fun test() { return 42; }";
num tokens = CompilerLib[tokenize](test_code);
show "Tokenizing code: " + tokens;

num ast = CompilerLib[parse](test_code);
show "Parsing code: " + ast;

num bytecode = CompilerLib[compile](test_code);
show "Compiling code: " + bytecode;

show "===== COMPILER LIBRARY TEST COMPnumE =====";
